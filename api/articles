[
    {
        "id": "9ccfd2b181b7",
        "title": "Reactive DOM — Finally!",
        "permalink": "https://medium.com/p/9ccfd2b181b7",
        "escapedTitle": "reactive-dom--finally",
        "url": "blog/reactive-dom--finally",
        "intro": "As a web developer, if you stop to think about web development, you will realize that all UI libraries and frameworks are just trying to fix the cumbersome of working with DOM and creating reusable code. You can find everything else built into the browser or JavaScript already.",
        "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*yIr6F2O34NcuCWht_Cv74A@2x.png",
        "readDuration": 4,
        "urlShort": "blog/9ccfd2b181b7",
        "category": [
            "markupjs",
            "frontend-development",
            "programming",
            "web-development",
            "technology"
        ],
        "publishedAt": "Sun, 21 Apr 2024 09:46:56 GMT",
        "updatedAt": "2024-04-23T10:52:20.550Z",
        "content": "<h3>Reactive DOM — Finally</h3><h4>DOM API should not be the reason to avoid building with Vanilla JavaScript</h4><p>As a web developer, if you stop to think about web development, you will realize that all UI libraries and frameworks are just trying to fix the cumbersome of working with DOM and creating reusable code. You can find everything else built into the browser or JavaScript already.</p><p>For example, let’s create a simple counter&nbsp;widget.</p><p>We can start by defining the HTML like&nbsp;so:</p><pre>&lt;div class=\"vanilla-count\"&gt;<br>  &lt;p&gt;count: &lt;span class=\"count-value\"&gt;0&lt;/span&gt;&lt;/p&gt;<br>  &lt;button type=\"button\" class=\"count-down\"&gt;-&lt;/button&gt;<br>  &lt;button type=\"button\" class=\"count-up\"&gt;+&lt;/button&gt;<br>&lt;/div&gt;</pre><p>Without adding any styling, let’s add behavior to it with JavaScript:</p><pre>const vanillaCount = document.querySelector('.vanilla-count');<br>const [countDisplay, countDownButton, countUpButton] = vanillaCount.children;<br>const [countSpan] = countDisplay.children;<br><br>let count = 0;<br><br>countUpButton.addEventListener('click', () =&gt; {<br>  count += 1;<br>  countSpan.textContent = count;<br>})<br><br>countDownButton.addEventListener('click', () =&gt; {<br>  count -= 1;<br>  countSpan.textContent = count;<br>})</pre><h4>The problem</h4><p>With this, we face a few problems:</p><ul><li><strong>HTML and JavaScript code are decoupled</strong>: nothing couples these together to ensure that changing one wouldn’t break the&nbsp;other.</li><li><strong>Custom reactivity and DOM manipulation</strong>: To make it work, you must add your reactive behavior with event listening and DOM manipulation. This is a simple example, but it would be a living hell in a more complex scenario.</li><li><strong>Reusability</strong>: if you want to reuse this in multiple places, it does not come with additional management and refactoring to avoid conflicts.</li></ul><p>We can solve the reusability and decoupling issues easily with functions. Something like&nbsp;this:</p><pre>const createCountWidget = (parent) =&gt; {<br>  const vanillaCount = document.createElement('div');<br>  vanillaCount.className = 'vanilla-count';<br>  vanillaCount.innerHTML = `<br>    &lt;p&gt;count: &lt;span class=\"count-value\"&gt;0&lt;/span&gt;&lt;/p&gt;<br>    &lt;button type=\"button\" class=\"count-down\"&gt;-&lt;/button&gt;<br>    &lt;button type=\"button\" class=\"count-up\"&gt;+&lt;/button&gt;<br>  `<br>  <br>  const [countDisplay, countDownButton, countUpButton] = vanillaCount.children;<br>  const [countSpan] = countDisplay.children;<br>  <br>  let count = 0;<br>  <br>  countUpButton.addEventListener('click', () =&gt; {<br>    count += 1;<br>    countSpan.textContent = count;<br>  })<br>  <br>  countDownButton.addEventListener('click', () =&gt; {<br>    count -= 1;<br>    countSpan.textContent = count;<br>  })<br>  <br>  parent.appendChild(vanillaCount)<br>}</pre><p>By moving everything inside a function, we ensure everything works together and reuse it as often as possible by calling it with a parent node where it must be&nbsp;added.</p><pre>createCountWidget(document.body)</pre><p>This can even be a web component to solve the same&nbsp;issues:</p><pre>class CountWidget extends HTMLElement {<br>  count = 0;<br><br>  constructor() {<br>    super();<br>    <br>    this.innerHTML = `<br>      &lt;p&gt;count: &lt;span class=\"count-value\"&gt;0&lt;/span&gt;&lt;/p&gt;<br>      &lt;button type=\"button\" class=\"count-down\"&gt;-&lt;/button&gt;<br>      &lt;button type=\"button\" class=\"count-up\"&gt;+&lt;/button&gt;<br>    `;<br>  }<br><br>  countUp = () =&gt; {<br>    this.count += 1;<br>    this.querySelector('.count-value').textContent = this.count;<br>  }<br>  <br>  countDown = (evt) =&gt; {<br>    this.count -= 1;<br>    this.querySelector('.count-value').textContent = this.count;<br>  }<br>  <br>  connectedCallback() {<br>    const [, countDownButton, countUpButton] = this.children;<br><br>    countUpButton.addEventListener('click', this.countUp);<br>    countDownButton.addEventListener('click', this.countDown);<br>  }<br>}<br><br>customElements.define('count-widget', CountWidget)</pre><p>We would have our custom HTML tag to use anywhere we&nbsp;like…</p><pre>&lt;count-widget&gt;&lt;/count-widget&gt;</pre><p>Web components give us some reactivity from props, but as you can see, state handling and DOM manipulation inside the component are still required to make things&nbsp;work.</p><h4>Now what?</h4><p>This is why people use libraries like React, Angular, and many others. They solve such problems by providing out-of-the-box APIs and a big ecosystem that allows us to build anything fast and reliable.</p><p>If you could solve the reactivity in the DOM, you wouldn’t need these libraries unless you want to lock yourself in an ecosystem or framework.</p><p>For example, what if we could do the following:</p><pre>const CountWidget = () =&gt; {<br>  const [count, updateCount] = state(0);<br>  <br>  const countUp = () =&gt; updateCount(prev =&gt; prev + 1)<br>  const countDown = () =&gt; updateCount(prev =&gt; prev - 1)<br>  <br>  return html`<br>    &lt;div class=\"markup-count\"&gt;<br>      &lt;p&gt;count: &lt;span class=\"count-value\"&gt;${count}&lt;/span&gt;&lt;/p&gt;<br>      &lt;button type=\"button\" class=\"count-down\" onclick=${countDown}&gt;-&lt;/button&gt;<br>      &lt;button type=\"button\" class=\"count-up\" onclick=${countUp}&gt;+&lt;/button&gt;<br>    &lt;/div&gt;<br>  `<br>}<br><br>CountWidget().render(document.body)</pre><p>The only thing new in the above code is <a href=\"https://markup.beforesemicolon.com/documentation/state-values\">state</a> and <a href=\"https://markup.beforesemicolon.com/documentation/creating-and-rendering\">html</a> APIs; everything else is Vanilla JavaScript. It leaves everything up to you as a web developer.</p><p>Or if web components were just as simple&nbsp;as:</p><pre>class CountWidget extends WebComponent {<br>  initialState = {<br>    count: 0<br>  }<br>  <br>  countUp = () =&gt; this.setState({<br>    count: this.state.count() + 1<br>  })<br>  <br>  countDown = () =&gt; this.setState({<br>    count: this.state.count() - 1<br>  })<br>  <br>  render() {<br>    return html`<br>      &lt;div class=\"markup-count\"&gt;<br>        &lt;p&gt;count: &lt;span class=\"count-value\"&gt;${this.state.count}&lt;/span&gt;&lt;/p&gt;<br>        &lt;button type=\"button\" class=\"count-down\" onclick=${this.countDown}&gt;-&lt;/button&gt;<br>        &lt;button type=\"button\" class=\"count-up\" onclick=${this.countUp}&gt;+&lt;/button&gt;<br>      &lt;/div&gt;<br>    `<br>  }<br>}<br><br>customElements.define('count-widget', CountWidget)</pre><p>This is all possible with <a href=\"https://markup.beforesemicolon.com/\"><strong>Markup</strong></a> in a roughly <strong>6kb package</strong> requiring no build and code compilation. Simply add a link to the top of your HTML page and&nbsp;get:</p><ul><li>Reactive templates with state handling;</li><li>Small and fast solution for DOM manipulation and reusable&nbsp;code;</li><li>Server-side rendering for templates;</li><li>Web components API simplified;</li></ul><p>I work with all these popular UI libraries, but occasionally, I want to do something simple without distancing myself too far from Vanilla JavaScript.</p><p>So, I created <a href=\"https://markup.beforesemicolon.com/\">Markup</a> and redefined what reactivity and <a href=\"https://markup.beforesemicolon.com/documentation/web-components\">Web Components</a> could be and do without installing a big opinionated package.</p><p>I prepared an essential training, but you can always check <a href=\"https://markup.beforesemicolon.com/documentation/get-started\">the docs</a> for examples and more&nbsp;details.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FmIr2XglV5nQ%3Flist%3DPLpWvGP6yhJUgWNiz25vj__CArY9Z0O6ke&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DmIr2XglV5nQ&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FmIr2XglV5nQ%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ba7ba7686454f121d68c027e7f10c4a5/href\">https://medium.com/media/ba7ba7686454f121d68c027e7f10c4a5/href</a></iframe><p>We have many great solutions; everyone can find what works for them. I wish something like Markup could be defaulted in browsers so we don’t have to split ourselves into different ecosystems and fight over which is&nbsp;better.</p><p>I created Markup so it could work for anyone alongside any library and framework while <strong>keeping it simple down to 3 essential APIs</strong>, leaving everything else up to everyone’s imagination.</p><p>Let me know what you&nbsp;think!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9ccfd2b181b7\" width=\"1\" height=\"1\" alt=\"\"><hr>",
        "creator": "Elson",
        "link": "https://medium.com/before-semicolon/reactive-dom-finally-9ccfd2b181b7?source=rss-505ba290f8ba------2"
    },
    {
        "id": "90977401e051",
        "title": "Setup for a TypeScript Node NPM Package Project",
        "permalink": "https://medium.com/p/90977401e051",
        "escapedTitle": "setup-for-a-typescript-node-npm-package-project",
        "url": "https://medium.com/before-semicolon/setup-for-a-typescript-node-npm-package-project-90977401e051?source=rss-505ba290f8ba------2",
        "intro": null,
        "thumbnail": "https://cdn-images-1.medium.com/max/1000/1*n2YyXncCgoWgemC6xjZG4w.jpeg",
        "readDuration": 4,
        "urlShort": "https://medium.com/p/90977401e051",
        "category": [
            "nodejs",
            "javascript",
            "technology",
            "npm",
            "typescript"
        ],
        "publishedAt": "Sun, 14 Jan 2024 23:41:01 GMT",
        "updatedAt": "2024-02-05T03:14:10.805Z",
        "content": "",
        "creator": "Elson",
        "link": "https://medium.com/before-semicolon/setup-for-a-typescript-node-npm-package-project-90977401e051?source=rss-505ba290f8ba------2"
    },
    {
        "id": "947265ae7ad3",
        "title": "How I Built a Fast HTML Parser Using Regex and TypeScript",
        "permalink": "https://medium.com/p/947265ae7ad3",
        "escapedTitle": "how-i-built-a-fast-html-parser-using-regex-and-typescript",
        "url": "https://elsontc.medium.com/how-i-built-a-fast-html-parser-using-regex-and-typescript-947265ae7ad3?source=rss-505ba290f8ba------2",
        "intro": "Photo by Jay Zhang on Unsplash",
        "thumbnail": "https://cdn-images-1.medium.com/max/2600/0*xlOX2bRDvPLoKz5u",
        "readDuration": 4,
        "urlShort": "https://medium.com/p/947265ae7ad3",
        "category": [
            "nodejs",
            "web-development",
            "html",
            "typescript",
            "programming"
        ],
        "publishedAt": "Mon, 13 Nov 2023 04:19:29 GMT",
        "updatedAt": "2024-01-15T09:39:24.541Z",
        "content": "",
        "creator": "Elson",
        "link": "https://elsontc.medium.com/how-i-built-a-fast-html-parser-using-regex-and-typescript-947265ae7ad3?source=rss-505ba290f8ba------2"
    },
    {
        "id": "108b83e5a501",
        "title": "How To Create Custom Modal/Dialog in React",
        "permalink": "https://medium.com/p/108b83e5a501",
        "escapedTitle": "how-to-create-custom-modaldialog-in-react",
        "url": "https://medium.com/before-semicolon/how-to-create-custom-modal-dialog-in-react-108b83e5a501?source=rss-505ba290f8ba------2",
        "intro": "Modals and Dialogs are ways you can focus users on a specific thing you want them to act upon. They are industry standard and super common…",
        "thumbnail": "https://cdn-images-1.medium.com/max/2566/1*yomLDnSqB9k86Nlj3bCKvA.png",
        "readDuration": 4,
        "urlShort": "https://medium.com/p/108b83e5a501",
        "category": [
            "typescript",
            "ui-design",
            "front-end-development",
            "react",
            "web-development"
        ],
        "publishedAt": "Fri, 03 Mar 2023 10:31:06 GMT",
        "updatedAt": "2023-03-03T10:51:46.056Z",
        "content": "",
        "creator": "Elson",
        "link": "https://medium.com/before-semicolon/how-to-create-custom-modal-dialog-in-react-108b83e5a501?source=rss-505ba290f8ba------2"
    },
    {
        "id": "c18903fadc4d",
        "title": "How to Handle Modals In A Large-Scale React App — Render Manager",
        "permalink": "https://medium.com/p/c18903fadc4d",
        "escapedTitle": "how-to-handle-modals-in-a-large-scale-react-app--render-manager",
        "url": "https://medium.com/before-semicolon/how-to-handle-modals-in-a-large-scale-react-app-render-manager-c18903fadc4d?source=rss-505ba290f8ba------2",
        "intro": "Modals, Dialogs, Notifications, and Snackbars, are all examples of “global components” — as I call them. These are components that should…",
        "thumbnail": "https://cdn-images-1.medium.com/max/2600/0*XwLgvgl3cRs87Lzp",
        "readDuration": 4,
        "urlShort": "https://medium.com/p/c18903fadc4d",
        "category": [
            "ui-ux-design",
            "react",
            "typescript",
            "web-development",
            "javascript"
        ],
        "publishedAt": "Thu, 02 Mar 2023 10:35:12 GMT",
        "updatedAt": "2023-03-03T12:34:36.606Z",
        "content": "",
        "creator": "Elson",
        "link": "https://medium.com/before-semicolon/how-to-handle-modals-in-a-large-scale-react-app-render-manager-c18903fadc4d?source=rss-505ba290f8ba------2"
    },
    {
        "id": "8dbd046bddb3",
        "title": "How To Create a JSON Database In NodeJs From Scratch",
        "permalink": "https://medium.com/p/8dbd046bddb3",
        "escapedTitle": "how-to-create-a-json-database-in-nodejs-from-scratch",
        "url": "https://medium.com/before-semicolon/how-to-create-a-json-database-in-nodejs-from-scratch-8dbd046bddb3?source=rss-505ba290f8ba------2",
        "intro": "In order to teach myself my ways of working with NodeJs, Javascript, and Typescript, I have built many versions of a file-based JSON…",
        "thumbnail": "https://cdn-images-1.medium.com/max/2600/0*rX8HMa1WcTxOuVo7",
        "readDuration": 4,
        "urlShort": "https://medium.com/p/8dbd046bddb3",
        "category": [
            "how-to",
            "typescript",
            "database",
            "javascript",
            "nodejs"
        ],
        "publishedAt": "Wed, 22 Feb 2023 10:55:39 GMT",
        "updatedAt": "2023-02-25T07:25:27.028Z",
        "content": "",
        "creator": "Elson",
        "link": "https://medium.com/before-semicolon/how-to-create-a-json-database-in-nodejs-from-scratch-8dbd046bddb3?source=rss-505ba290f8ba------2"
    },
    {
        "id": "16f3874f2ce5",
        "title": "How to Set up a TypeScript + NodeJs Server (2024)",
        "permalink": "https://medium.com/p/16f3874f2ce5",
        "escapedTitle": "how-to-set-up-a-typescript--nodejs-server-2024",
        "url": "https://medium.com/before-semicolon/how-to-setup-a-typescript-nodejs-server-2023-16f3874f2ce5?source=rss-505ba290f8ba------2",
        "intro": "With new releases and tools, setting up a node server has become super simple and until NodeJs ships with typescript built-in, adding&#x2026;",
        "thumbnail": "https://cdn-images-1.medium.com/max/1280/1*yY3Ohl7oy2bvUOjxU-iJPg.png",
        "readDuration": 4,
        "urlShort": "https://medium.com/p/16f3874f2ce5",
        "category": [
            "backend",
            "nodejs",
            "technology",
            "typescript",
            "javascript"
        ],
        "publishedAt": "Sat, 18 Feb 2023 07:06:48 GMT",
        "updatedAt": "2024-03-18T14:10:36.332Z",
        "content": "",
        "creator": "Elson",
        "link": "https://medium.com/before-semicolon/how-to-setup-a-typescript-nodejs-server-2023-16f3874f2ce5?source=rss-505ba290f8ba------2"
    },
    {
        "id": "5bead4a5aa8b",
        "title": "Better Ways To Handle Data Storage on The Web Client",
        "permalink": "https://medium.com/p/5bead4a5aa8b",
        "escapedTitle": "better-ways-to-handle-data-storage-on-the-web-client",
        "url": "https://medium.com/before-semicolon/better-ways-to-handle-data-storage-on-the-web-client-5bead4a5aa8b?source=rss-505ba290f8ba------2",
        "intro": "Whenever you mention data storage and state management on the web client, different people will provide you with different solutions. From&#x2026;",
        "thumbnail": "https://cdn-images-1.medium.com/max/2600/0*ph0he5o0KcfUqR-1",
        "readDuration": 4,
        "urlShort": "https://medium.com/p/5bead4a5aa8b",
        "category": [
            "technology",
            "state-management",
            "web-development",
            "javascript",
            "programming"
        ],
        "publishedAt": "Sun, 12 Feb 2023 21:16:37 GMT",
        "updatedAt": "2023-02-23T04:07:30.762Z",
        "content": "",
        "creator": "Elson",
        "link": "https://medium.com/before-semicolon/better-ways-to-handle-data-storage-on-the-web-client-5bead4a5aa8b?source=rss-505ba290f8ba------2"
    },
    {
        "id": "c5a82183d5b4",
        "title": "How to Handle Data Lists in React Like a Pro — FlatList React",
        "permalink": "https://medium.com/p/c5a82183d5b4",
        "escapedTitle": "how-to-handle-data-lists-in-react-like-a-pro--flatlist-react",
        "url": "https://medium.com/before-semicolon/how-to-handle-data-lists-in-react-like-a-pro-flatlist-react-c5a82183d5b4?source=rss-505ba290f8ba------2",
        "intro": "Often enough you get to deal with some set of data that you must list to the user. This can be in a dropdown, table, or standard&#x2026;",
        "thumbnail": "https://cdn-images-1.medium.com/max/2600/0*75Lvdf-npMO6VVxm",
        "readDuration": 4,
        "urlShort": "https://medium.com/p/c5a82183d5b4",
        "category": [
            "data-structures",
            "javascript",
            "technology",
            "react",
            "web-development"
        ],
        "publishedAt": "Tue, 11 Oct 2022 05:00:51 GMT",
        "updatedAt": "2023-02-23T04:07:54.266Z",
        "content": "",
        "creator": "Elson",
        "link": "https://medium.com/before-semicolon/how-to-handle-data-lists-in-react-like-a-pro-flatlist-react-c5a82183d5b4?source=rss-505ba290f8ba------2"
    },
    {
        "id": "70387443b4cb",
        "title": "How to Work With Web Client Storage",
        "permalink": "https://medium.com/p/70387443b4cb",
        "escapedTitle": "how-to-work-with-web-client-storage",
        "url": "https://javascript.plainenglish.io/a-better-way-to-work-with-web-client-storage-70387443b4cb?source=rss-505ba290f8ba------2",
        "intro": "A better way to work with web client storage",
        "thumbnail": "https://cdn-images-1.medium.com/max/2600/0*gNdjy6fJ6tznFvK_",
        "readDuration": 4,
        "urlShort": "https://medium.com/p/70387443b4cb",
        "category": [
            "front-end-development",
            "web-storage",
            "programming",
            "web-development",
            "open-source"
        ],
        "publishedAt": "Wed, 22 Jun 2022 07:42:57 GMT",
        "updatedAt": "2022-11-29T07:25:57.475Z",
        "content": "",
        "creator": "Elson",
        "link": "https://javascript.plainenglish.io/a-better-way-to-work-with-web-client-storage-70387443b4cb?source=rss-505ba290f8ba------2"
    }
]